{
  "name": "sf",
  "description": "String formatting library for node.js",
  "author": {
    "name": "Joe Ferner",
    "email": "joe.ferner@nearinfinity.com"
  },
  "keywords": [
    "string",
    "format",
    "template"
  ],
  "version": "0.1.7",
  "engines": {
    "node": ">=0.6.0"
  },
  "maintainers": [
    {
      "name": "Joe Ferner",
      "email": "joe.ferner@nearinfinity.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/nearinfinity/node-sf/issues"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/nearinfinity/node-sf.git"
  },
  "devDependencies": {
    "nodeunit": "~0.7.3",
    "timezone-js": "~0.4.3"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "main": "./sf.js",
  "readme": "# sf\n\n[![Build Status](https://secure.travis-ci.org/nearinfinity/node-sf.png)](http://travis-ci.org/nearinfinity/node-sf)\n\nString formatting library for node.js.\n\n## Installation\n\n```bash\n$ npm install sf\n```\n\n## Quick Examples\n\n```javascript\nvar sf = require(\"sf\");\n\nsf(\"{who} has a {what}\", { who: 'dog', what: 'tail' });\n// returns: dog has a tail\n\nsf(\"{0} has a {1}\", 'dog', 'tail');\n// returns: dog has a tail\n\nsf(\"{0:#,##0.00}\", 2123.1);\n// returns: 2,123.10\n\nsf(\"{0,15:#,##0.00}\", 2123.1);\n// returns:        2,123.10\n\nsf(\"{a.b}\", { a: { b: 'test' }});\n// returns: test\n\nsf(\"{a.z.c}\", { a: { b: 'test' }});\n// throws an error\n\nsf(\"{a.?z.?c}\", { a: { b: 'test' }});\n// returns:\n\nsf(\"{a[0]}\", { a: [ 'foo', 'bar' ]});\n// returns: foo\n\nsf(\"{a[-1]}\", { a: [ 'foo', 'bar' ]});\n// returns: bar\n\nsf.log(\"{who} has a {what}\", { who: 'dog', what: 'tail' });\n// outputs to standard out: dog has a tail\n\nsf(\"{0:^d 'Days,' h:mm:ss.fff}\", new sf.TimeSpan(8173818181));\n// returns: 94 Days, 14:30:18.181\n```\n\n## Format Specifiers\n\nThe format is similar to C#'s string.format. The text inside the curly braces is {indexOrName[,alignment][:formatString]}.\nIf alignment is positive the text is right aligned. If alignment is negative it will be left aligned.\n\n### Object\n\n| Specifier | Name                         |\n|-----------|------------------------------|\n| json      | JSON.stringify               |\n| inspect   | util.inspect                 |\n\n### Numbers\n\n| Specifier | Name                         | Example          | Output         |\n|-----------|------------------------------|------------------|----------------|\n| 0         | Zero placeholder             | {0:00.0000}      | 02.1200        |\n| #         | Digit placeholder            | {0:#,###}        | 1,234          |\n| x         | Lowercase hex                | {0:x4}           | 01fc           |\n| X         | Uppercase hex                | {0:X4}           | 01FC           |\n\n### Dates\n\n| Specifier | Name                            | Example                         |\n|-----------|---------------------------------|---------------------------------|\n| sd        | Short date                      | 10/12/2002                      |\n| D         | Long date                       | December 10, 2002               |\n| t         | Short time                      | 10:11 PM                        |\n| T         | Long time                       | 10:11:29 PM                     |\n| fdt       | Full date & time                | December 10, 2002 10:11 PM      |\n| F         | Full date & time (long)         | December 10, 2002 10:11:29 PM   |\n| g         | Default date & time             | 10/12/2002 10:11 PM             |\n| G         | Default date & time (long)      | 10/12/2002 10:11:29 PM          |\n| md        | Month day pattern               | December 10                     |\n| r         | RFC1123 date string             | Tue, 10 Dec 2002 22:11:29 +0500 |\n| s         | Sortable date string            | 2002-12-10T22:11:29             |\n| d         | Date single digit               | 1                               |\n| dd        | Date leading zero               | 01                              |\n| ddd       | Short day name                  | Mon                             |\n| dddd      | Long day name                   | Monday                          |\n| f         | Fraction of second (1 digit)    | 1                               |\n| ff        | Fraction of second (2 digit)    | 24                              |\n| fff       | Fraction of second (3 digit)    | 345                             |\n| h         | Hour 12-hour format 1 digit     | 5                               |\n| hh        | Hour 12-hour format 2 digits    | 05                              |\n| H         | Hour 24-hour format 1 digit     | 5                               |\n| HH        | Hour 24-hour format 2 digits    | 05                              |\n| mm        | Minutes 2 digits                | 23                              |\n| M         | Month single digit              | 2                               |\n| MM        | Month leading zero              | 02                              |\n| MMM       | Month short name                | Feb                             |\n| MMMM      | Month long name                 | February                        |\n| ss        | Seconds 2 digits                | 54                              |\n| tt        | AM/PM                           | AM                              |\n| yy        | Year 2 digits                   | 12                              |\n| yyyy      | Year 4 digits                   | 2012                            |\n| zz        | Time zone offset                | 05                              |\n| +zz       | Time zone offset leading +      | +05                             |\n| zzz       | Time zone offset full           | 05:00                           |\n| zzzz      | Time zone offset full           | 0500                            |\n| +zzzz     | Time zone offset full leading + | +0500                           |\n\n### sf.TimeSpan\n\n| Specifier | Name                | Example                |\n|-----------|---------------------|------------------------|\n| y         | Years               | 2                      |\n| M         | Months              | 6                      |\n| d         | Days                | 8                      |\n| h         | Hours               | 10                     |\n| m         | Minutes             | 15                     |\n| s         | Seconds             | 5                      |\n| f         | Fraction of Seconds | 9                      |\n\nIf you prefix the specifier with '^' you will get the total number of that value. For\nexample '^s' will output the total number of seconds in the time span. Where as 's' will\nonly output the number of seconds in a minute.\n\nIf you repeat characters the value will be prefixed with zeros.\n\n## sf.indent(str, options)\n\nHelper function to word wrap and indent a string.\n\n__Arguments__\n\n * str - The string to indent and wrap.\n * options\n  * prefix - The prefix to appear at the beginning of each new line.\n  * wordwrap - The maximum length of each line.\n\n## Helper Functions\n\n * sf.log(formatString [, args...]);\n * sf.info(formatString [, args...]);\n * sf.warn(formatString [, args...]);\n * sf.error(formatString [, args...]);\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/nearinfinity/node-sf",
  "_id": "sf@0.1.7",
  "_from": "sf@0.1.7"
}
