/*
    Changes to WorldMorph for managing Snap4Arduino functions
*/

/**
 * Global object (world.Arduino) used for s4a/arduino properties
 */
WorldMorph.prototype.Arduino = {
    firmata : require('firmata'),
    serialport : require('serialport'),
    portList : [],
    usedPorts : []
};

/**
 * Locks the given port to prevent its use in other connection (until it is unlocked)
 */
WorldMorph.prototype.Arduino.lockPort = function (port) {
    var usedPorts = this.usedPorts;

    if (usedPorts.indexOf(port) === -1) {
        usedPorts.push(port);
    }
}

/**
 * Unlocks a previously Locked port to permit its use in new connections
 * Should be called when closing connections
 */
WorldMorph.prototype.Arduino.unlockPort = function (port) {
    var usedPorts = this.usedPorts;

    if (usedPorts.indexOf(port) > -1) {
        usedPorts.splice(usedPorts.indexOf(port));
    }
}

/**
 * Informs whether the port is locked or unlocked
 */
WorldMorph.prototype.Arduino.isPortLocked = function (port) {
    return (this.usedPorts.indexOf(port) > -1)
}


/**
 * Gets a list of available serial ports (paths) and return it through callback function
 */
WorldMorph.prototype.Arduino.getSerialPorts = function (callback) {
    var myself = this;

    var portList = [];
    var portcheck = /usb|DevB|rfcomm|acm|^com/i; // Not sure about rfcomm! We must dig further how bluetooth works in Gnu/Linux

    myself.serialport.list(function (err, ports) { 
        if (ports) { 
            ports.forEach(function(each) { 
                if(!myself.isPortLocked(each.comName) && portcheck.test(each.comName)) {
                    portList[each.comName] = each.comName; 
                }
            });
        }
        callback(portList);
    });
    
};

WorldMorph.prototype.Arduino.processC = function (body) {
    var lines = body.split('\n'),
        header = '/* ============================================\n'
               + ' *        AUTO-Generated by Snap4Arduino\n'
               + ' * ============================================\n'
               + ' *\n'
               + ' * Please review this sketch before pushing it.\n'
               + ' *\n'
               + ' * This is an experimental feature, and there\n'
               + ' * are _several_ Snap!-related functionalities\n'
               + ' * that are, by definition, untranslatable to\n'
               + ' * static languages.\n'
               + ' *\n'
               + ' * There is NO WARRANTY whatsoever that this\n'
               + ' * sketch is going to work exactly in the same\n'
               + ' * way as the original Snap4Arduino script.\n'
               + ' */\n\n',
        setup = 'void setup() {\n',
        servoLines,
        servoPins,
        digitalOutputLines,
        digitalOutputPins,
        digitalInputLines,
        digitalInputPins;
    
    unique = function(anArray) {
        return anArray.filter(function(elem, pos) { 
            return anArray.indexOf(elem) == pos; 
        })
    }

    // let's find out what pins are we using, and for what purpose
	//SDM: changed regex so variables can be used for pin numbers
    servoLines = lines.filter(function(each) { return each.match(/servo[A-Za-z0-9]*\.write/)} );
    servoPins = unique(servoLines.map(function(each) { return each.replace(/.*servo([A-Za-z0-9]*)\.write.*/g, '$1') }));

    digitalOutputLines = lines.filter(function(each) { return each.match(/digitalWrite/)});
    digitalOutputPins = unique(digitalOutputLines.map(function(each) { return each.replace(/.*digitalWrite\(([A-Za-z0-9]*),.*\).*/g, '$1') }));

    digitalInputLines = lines.filter(function(each) { return each.match(/digitalRead/)});
    digitalInputPins = unique(digitalInputLines.map(function(each) { return each.replace(/.*digitalRead\(([A-Za-z0-9]*)\).*/g, '$1') }));
	
	//SDM
	//detect variables and declaration and assignment to header, so they can be used in setup()
	//only for variables outside of loops a type detection is build in (only int or char)
	//usefull for using variables holding the pin numbers of Arduino
	//TODO: type detection for vars in loops
	var headertemp = '';
	var headerVar = '';

	variableDeclareLines = lines.filter(function(each) { return each.match(/int/)});
	variableDeclareLines.forEach( function(varNames) { //declaration lines (int a,b,c,d;)
		body = body.replace(varNames + '\n', '') //remove declaration line in body, will be added later in head
		lines = body.split('\n')
		var variables = varNames.split(',');
		variables.forEach( function(varName) { //lines with assignment of variable
			varName = varName.replace('int ', '')
			varName = varName.replace(';', '')
			var reName = new RegExp(varName + ' = ', 'g');
			variableLines = lines.filter(function(each) { return each.match(reName)});
			var reValue = new RegExp('/.*' + varName + ' \= ([A-Za-z0-9]*)', 'g');
			variableSetValues = unique(variableLines.map(function(each) { return each.replace(reValue, '$1') }));
			variableSetValues.forEach( function(valueString) { if (valueString.substring(0, 1) != ' ') {
																body = body.replace(valueString + '\n', '') //remove assignment line in body, will be added later in head
																var value = valueString.substring(valueString.lastIndexOf(" ")+1,valueString.lastIndexOf(";"))
																if (isNaN(value)) { //detect type of assignment (only int or char)
																	//detect if assignment is an Analog pin number (i.e. A0, A1) then type is int
																	if ((value.length == 2) && ((value.substring(0,1) == 'A' || value.substring(0,1) == 'a') && !isNaN(value.substring(1,2)))) {
																		headertemp += 'int ' + valueString + '\n'
																	} else {
																		headertemp += 'char ' + valueString + '\n'
																	}
																} else {
																	headertemp += 'int ' + valueString + '\n'
																};
																varNames = varNames.replace(',' + varName + ';', ';')
																varNames = varNames.replace(varName + ',', '')
																if (varNames.substring(varNames.lastIndexOf(" ")+1,varNames.lastIndexOf(";")) == varName) {
																	varNames = varNames.replace(varName + ';', ';')
																}
															} });
		});
		
		//add variable lines to header (only for vars outside of loops)
		if (varNames != 'int ;') {
			headerVar += varNames + '\n' + headertemp + '\n'
		} else {
			headerVar += headertemp + '\n'
		};
	});
	//SDM
	
	//SDM
	
	var buzPin = '0';
	buzPinVariableDeclareLines = lines.filter(function(each) { return each.match(/buzPin_iQMaak/)});
	buzPinVariableDeclareLines.forEach( function(buzPinVar) {
																body = body.replace(buzPinVar + '\n', '') //remove assignment line in body, will be added later in head
																buzPin = buzPinVar.substring(buzPinVar.lastIndexOf(" ")+1,buzPinVar.lastIndexOf(";"))
															});
	
	//recode the melody so that two variables are made (int melody[]) and (int duration[])
	body = body.replace('tempmelody(\n', '')
	body = body.replace('tempmelody)', '')
	melodyNoteLines = lines.filter(function(each) { return each.match(/.*playnote/)});
	var notes = '';
	melodyNoteLines.forEach (function(line) {
												note = line.substring(line.lastIndexOf(" ")+1,line.lastIndexOf(";"))
												notes += note + ','
												body = body.replace(line + '\n', '')
											});
	notes = notes.substring(0, notes.length - 1)
	
	melodyDurationLines = lines.filter(function(each) { return each.match(/.*duration/)});
	var durations = '';
	melodyDurationLines.forEach (function(durLine) {
												duration = durLine.substring(durLine.lastIndexOf(" ")+1,durLine.lastIndexOf(";"))
												//durations += duration + ','
												durations += 1.0/duration + ','
												body = body.replace(durLine + '\n', '')
											});
	
	durations = durations.substring(0, durations.length - 1)
	
	var defMelody = 'int melody[] = {\n  ' + notes + '\n};\n\n'
	var defDurations = 'int noteDurations[] = {\n ' + durations + '\n};\n\n'
	var voidMelody = 'void Melody() {\n'
					+ '  int size = sizeof(melody) / sizeof(int);\n'
					+ '  for (int thisNote = 0; thisNote < size; thisNote++) {\n'
					+ '    int noteDuration = 1000/noteDurations[thisNote];\n'
					+ '    tone(' + buzPin + ', melody[thisNote],noteDuration);\n'
					+ '    int pauseBetweenNotes = noteDuration * 1.30;\n'
					+ '    delay(pauseBetweenNotes);\n'
					+ '    noTone(' + buzPin + ');\n'
					+ '    pinMode(' + buzPin + ', INPUT);\n'
					+ '  }\n'
					+ '}\n\n'
	
	//SDM
	
    // now let's construct the header and the setup body
    if (servoLines.length > 0) { header += '#include <Servo.h>\n\n' };

    servoPins.forEach( function(pin) { 
        header += 'Servo servo' + pin + ';\n'
        setup += '  servo' + pin + '.attach(' + pin + ');\n'
    });

    header += '\n';

    digitalOutputPins.forEach( function(pin){ setup += '  pinMode(' + pin + ', OUTPUT);\n' });
    digitalInputPins.forEach( function(pin){ setup += '  pinMode(' + pin + ', INPUT);\n' });

    setup += '}\n\n';
	
	if (body.indexOf("void loop()") == -1) {
		body = body + 'void loop() {\n}\n'
	};
	
	//SDM: added headerVar
	if (notes.length > 0) {
		return (header + headerVar + defMelody + defDurations + voidMelody + setup + body);
	} else {
		return (header + headerVar + setup + body);
	};
}
